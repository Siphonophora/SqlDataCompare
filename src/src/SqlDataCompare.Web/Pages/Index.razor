@page "/"
@inject ComprableColumnService columnService
@inject ComparisonTemplator templator

<h4 class="mt-4 mb-4"><span class="numberCircle mr-3">1</span>Add SQL</h4>
<p>
    Provide the two queries which you want to compare. These queries could simply select all data from two different
    tables or they can more complex. See the <a href="https://github.com/Siphonophora/SqlDataCompare/blob/master/docs/getting_started.md">getting started</a> page for examples.
</p>
<p>
    Queries that perform database edits (except to temp tables) are not supported. This tool attempts to detect any instance where a query
    would alter a database or data, and will not produce a template when this occurrs. However, it is your responsibility
    to ensure your queries are safe to run.
</p>
<div class="row">
    <div class="col-xl">
        <SqlInput Title="Assert Sql"
                  Description="The query which we assume is correct."
                  SqlParsed="(ParsedSql a) => { columnService.UpdateParsedSql(assertSql: a); UpdateTemplate(); }" />
    </div>
    <div class="col-xl">
        <SqlInput Title="Test Sql"
                  Description="The new query we want to test."
                  SqlParsed="(ParsedSql t) => { columnService.UpdateParsedSql(testSql: t); UpdateTemplate(); }" />
    </div>
</div>

@if (comparable)
{
    <h4 class="mt-4 mb-4"><span class="numberCircle mr-3">2</span>Select Keys</h4>
    <p>
        Select one or more keys which uniquely define each row of the query results. Use the up/down arrows to reorder the
        columns. For keys, the order of the columns also defines the sort order of the keys. Note that the sort option
        (ascending or descending) selected for regular columns only impacts the output showing discrepancies in that
        specific column.
    </p>
    <ColumnTable OrderedColumns="@(() => columnService.ComparableColumns)" Changed="UpdateTemplate" />

    @if (needsKeys)
    {
        <div class="alert alert-info mt-2" role="alert">
            You must pick at least one key column.
        </div>
    }
    else
    {
        <h4 class="mt-4 mb-4"><span class="numberCircle mr-3">3</span>Copy Template</h4>
        <p>
            Copy the template, and paste it into your sql client (i.e. Sql Server Management Studio, Azure Data Studio).
            Run the query to view the results.
        </p>
        <SqlTemplate Sql="@templatedSql" />
    }
}
else if (string.IsNullOrWhiteSpace(columnService.ErrorMessage) == false)
{
    <div class="alert alert-danger mt-2" role="alert">
        Error: @columnService.ErrorMessage
    </div>
}

@code{
    private string templatedSql = string.Empty;
    private bool needsKeys = true;
    private bool comparable = false;

    private void UpdateTemplate()
    {
        // TODO figure out why state is changed isn't behaving as
        // expected so we can remove some of these extra calls.
        comparable = columnService.Comparable;
        if (!columnService.ComparableColumns.Any(x => x.IsKey))
        {
            needsKeys = true;
            StateHasChanged();
        }
        else
        {
            needsKeys = false;
            StateHasChanged();
            templatedSql = templator.Create(columnService.AssertParsedSql,
                                            columnService.TestParsedSql,
                                            columnService.ComparableColumns);
            StateHasChanged();
        }

    }
}
