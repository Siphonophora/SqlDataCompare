@page "/"
@inject ComprableColumnService columnService
@inject ComparisonTemplator templator

<h4><span class="numberCircle">1</span> Add SQL</h4>

<div class="row">
    <div class="col-xl">
        <SqlInput Title="Assert Sql"
                  SqlParsed="(ParsedSql a) => { columnService.UpdateParsedSql(assertSql: a); StateHasChanged(); }" />
    </div>
    <div class="col-xl">
        <SqlInput Title="Test Sql"
                  SqlParsed="(ParsedSql t) => { columnService.UpdateParsedSql(testSql: t); StateHasChanged(); }" />
    </div>
</div>

@if (columnService.Comparable)
{
    <h4><span class="numberCircle">2</span> Select Keys</h4>
    <ColumnTable OrderedColumns="@(() => columnService.ComparableColumns)" Changed="UpdateTemplate" />

    @if (needsKeys)
    {
        <p>You must pick at least one key column.</p>
    }
    else
    {
        <h4><span class="numberCircle">3</span> Copy Template</h4>
        <SqlTemplate Sql="@templatedSql" />
    }
}
else
{
    <div style="color:darkred">@columnService.ErrorMessage</div>
}

@code{
    private string templatedSql = string.Empty;
    private bool needsKeys = true;

    private void UpdateTemplate()
    {
        if (!columnService.ComparableColumns.Any(x => x.IsKey))
        {
            needsKeys = true;
            return;
        }

        needsKeys = false;
        templatedSql = templator.Create(columnService.AssertParsedSql,
                                        columnService.TestParsedSql,
                                        columnService.ComparableColumns);
        StateHasChanged();
    }
}
